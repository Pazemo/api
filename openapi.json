{
  "openapi": "3.0.0",
  "info": {
    "title": "idrm-api",
    "version": "1.0.0",
    "description": "api",
    "contact": {}
  },
  "paths": {
    "/accounts/search": {
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "search",
        "tags": [
          "AccountController"
        ],
        "responses": {
          "200": {
            "description": "Array of Account model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "currencyId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "AccountController.search"
      }
    },
    "/accounts/{accountId}/transactions/{id}": {
      "get": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "findById",
        "tags": [
          "TransactionController"
        ],
        "responses": {
          "200": {
            "description": "Transaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TransactionController.findById"
      }
    },
    "/accounts/{accountId}/transactions": {
      "get": {
        "x-controller-name": "TransactionController",
        "x-operation-name": "find",
        "tags": [
          "TransactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of Transaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "TransactionController.find"
      }
    },
    "/accounts/{accountId}/withdraw/{id}/cancel": {
      "post": {
        "x-controller-name": "WithdrawController",
        "x-operation-name": "cancel",
        "tags": [
          "WithdrawController"
        ],
        "responses": {
          "200": {
            "description": "Withdraw request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Withdraw"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "authorizationCode"
                ],
                "properties": {
                  "authorizationCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "WithdrawController.cancel"
      }
    },
    "/accounts/{accountId}/withdraw/{id}/confirm": {
      "post": {
        "x-controller-name": "WithdrawController",
        "x-operation-name": "confirm",
        "tags": [
          "WithdrawController"
        ],
        "responses": {
          "200": {
            "description": "Withdraw request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Withdraw"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "authorizationCode"
                ],
                "properties": {
                  "authorizationCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "WithdrawController.confirm"
      }
    },
    "/accounts/{accountId}/withdraw/{id}": {
      "get": {
        "x-controller-name": "WithdrawController",
        "x-operation-name": "findById",
        "tags": [
          "WithdrawController"
        ],
        "responses": {
          "200": {
            "description": "Beneficiary model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Withdraw.Filter"
                }
              }
            }
          }
        ],
        "operationId": "WithdrawController.findById"
      }
    },
    "/accounts/{accountId}/withdraw": {
      "post": {
        "x-controller-name": "WithdrawController",
        "x-operation-name": "create",
        "tags": [
          "WithdrawController"
        ],
        "responses": {
          "200": {
            "description": "Withdraw request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Withdraw"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawExcluding_createdTime-status-transactionId-network-feeAmount_"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "WithdrawController.create"
      }
    },
    "/apikeys/{id}": {
      "get": {
        "x-controller-name": "ApikeyController",
        "x-operation-name": "findById",
        "tags": [
          "ApikeyController"
        ],
        "responses": {
          "200": {
            "description": "Apikey model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApikeyWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apikey.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ApikeyController.findById"
      },
      "delete": {
        "x-controller-name": "ApikeyController",
        "x-operation-name": "deleteById",
        "tags": [
          "ApikeyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Apikey DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ApikeyController.deleteById"
      }
    },
    "/apikeys": {
      "post": {
        "x-controller-name": "ApikeyController",
        "x-operation-name": "create",
        "tags": [
          "ApikeyController"
        ],
        "responses": {
          "200": {
            "description": "Apikey model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apikey"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApikey"
              }
            }
          }
        },
        "operationId": "ApikeyController.create"
      },
      "get": {
        "x-controller-name": "ApikeyController",
        "x-operation-name": "find",
        "tags": [
          "ApikeyController"
        ],
        "responses": {
          "200": {
            "description": "Array of Apikey model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApikeyWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Apikey.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "ApikeyController.find"
      }
    },
    "/banks/count": {
      "get": {
        "x-controller-name": "BankController",
        "x-operation-name": "count",
        "tags": [
          "BankController"
        ],
        "responses": {
          "200": {
            "description": "Bank model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Bank.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Bank>"
                }
              }
            }
          }
        ],
        "operationId": "BankController.count"
      }
    },
    "/banks": {
      "get": {
        "x-controller-name": "BankController",
        "x-operation-name": "find",
        "tags": [
          "BankController"
        ],
        "responses": {
          "200": {
            "description": "Array of Bank model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bank.Filter"
                }
              }
            }
          }
        ],
        "operationId": "BankController.find"
      }
    },
    "/beneficiaries/count": {
      "get": {
        "x-controller-name": "BeneficiaryController",
        "x-operation-name": "count",
        "tags": [
          "BeneficiaryController"
        ],
        "responses": {
          "200": {
            "description": "Beneficiary model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Beneficiary.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Beneficiary>"
                }
              }
            }
          }
        ],
        "operationId": "BeneficiaryController.count"
      }
    },
    "/beneficiaries/{id}": {
      "get": {
        "x-controller-name": "BeneficiaryController",
        "x-operation-name": "findById",
        "tags": [
          "BeneficiaryController"
        ],
        "responses": {
          "200": {
            "description": "Beneficiary model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary.Filter"
                }
              }
            }
          }
        ],
        "operationId": "BeneficiaryController.findById"
      },
      "delete": {
        "x-controller-name": "BeneficiaryController",
        "x-operation-name": "deleteById",
        "tags": [
          "BeneficiaryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Beneficiary DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "operationId": "BeneficiaryController.deleteById"
      }
    },
    "/beneficiaries": {
      "post": {
        "x-controller-name": "BeneficiaryController",
        "x-operation-name": "create",
        "tags": [
          "BeneficiaryController"
        ],
        "responses": {
          "200": {
            "description": "Beneficiary model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryExcluding_updatedTime_"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBeneficiary"
              }
            }
          }
        },
        "operationId": "BeneficiaryController.create"
      },
      "get": {
        "x-controller-name": "BeneficiaryController",
        "x-operation-name": "find",
        "tags": [
          "BeneficiaryController"
        ],
        "responses": {
          "200": {
            "description": "Array of Beneficiary model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BeneficiaryWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Beneficiary.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "BeneficiaryController.find"
      }
    },
    "/check": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "check",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "greeting": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "headers": {
                      "type": "object",
                      "properties": {
                        "Content-Type": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "PingController.check"
      }
    },
    "/countries/count": {
      "get": {
        "x-controller-name": "CountryController",
        "x-operation-name": "count",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "200": {
            "description": "Country model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Country.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Country>"
                }
              }
            }
          }
        ],
        "operationId": "CountryController.count"
      }
    },
    "/countries/{id}": {
      "put": {
        "x-controller-name": "CountryController",
        "x-operation-name": "replaceById",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Country PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Country"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CountryController.replaceById"
      },
      "patch": {
        "x-controller-name": "CountryController",
        "x-operation-name": "updateById",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Country PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CountryController.updateById"
      },
      "get": {
        "x-controller-name": "CountryController",
        "x-operation-name": "findById",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "200": {
            "description": "Country model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CountryController.findById"
      },
      "delete": {
        "x-controller-name": "CountryController",
        "x-operation-name": "deleteById",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Country DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "CountryController.deleteById"
      }
    },
    "/countries": {
      "post": {
        "x-controller-name": "CountryController",
        "x-operation-name": "create",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "200": {
            "description": "Country model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCountry"
              }
            }
          }
        },
        "operationId": "CountryController.create"
      },
      "get": {
        "x-controller-name": "CountryController",
        "x-operation-name": "find",
        "tags": [
          "CountryController"
        ],
        "responses": {
          "200": {
            "description": "Array of Country model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "CountryController.find"
      }
    },
    "/currencies/count": {
      "get": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "count",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "200": {
            "description": "Currency model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Currency.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Currency>"
                }
              }
            }
          }
        ],
        "operationId": "CurrencyController.count"
      }
    },
    "/currencies/{id}": {
      "put": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "replaceById",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Currency PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CurrencyController.replaceById"
      },
      "patch": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "updateById",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Currency PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "CurrencyController.updateById"
      },
      "get": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "findById",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "200": {
            "description": "Currency model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency.Filter"
                }
              }
            }
          }
        ],
        "operationId": "CurrencyController.findById"
      },
      "delete": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "deleteById",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Currency DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "CurrencyController.deleteById"
      }
    },
    "/currencies": {
      "post": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "create",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "200": {
            "description": "Currency model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCurrency"
              }
            }
          }
        },
        "operationId": "CurrencyController.create"
      },
      "get": {
        "x-controller-name": "CurrencyController",
        "x-operation-name": "find",
        "tags": [
          "CurrencyController"
        ],
        "responses": {
          "200": {
            "description": "Array of Currency model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "CurrencyController.find"
      }
    },
    "/exchange": {
      "post": {
        "x-controller-name": "ExchangeController",
        "x-operation-name": "exchange",
        "tags": [
          "ExchangeController"
        ],
        "responses": {
          "200": {
            "description": "Exchange model instance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "fromAccountId",
                    "toAccountId",
                    "amount"
                  ],
                  "properties": {
                    "fromAccountId": {
                      "type": "string"
                    },
                    "toAccountId": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fromAccountId",
                  "toAccountId",
                  "amount"
                ],
                "properties": {
                  "fromAccountId": {
                    "type": "string"
                  },
                  "toAccountId": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "operationId": "ExchangeController.exchange"
      }
    },
    "/ext/flip/disbursecb": {
      "post": {
        "x-controller-name": "ExternalController",
        "x-operation-name": "flipDisburseCallback",
        "tags": [
          "ExternalController"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Callback received"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "operationId": "ExternalController.flipDisburseCallback"
      }
    },
    "/ext/flip/inqcb": {
      "post": {
        "x-controller-name": "ExternalController",
        "x-operation-name": "flipInqCallback",
        "tags": [
          "ExternalController"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Callback received"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "operationId": "ExternalController.flipInqCallback"
      }
    },
    "/fees/count": {
      "get": {
        "x-controller-name": "FeeController",
        "x-operation-name": "count",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "200": {
            "description": "Fee model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fee.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Fee>"
                }
              }
            }
          }
        ],
        "operationId": "FeeController.count"
      }
    },
    "/fees/{id}": {
      "put": {
        "x-controller-name": "FeeController",
        "x-operation-name": "replaceById",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Fee PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Fee"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "FeeController.replaceById"
      },
      "patch": {
        "x-controller-name": "FeeController",
        "x-operation-name": "updateById",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Fee PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeePartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "FeeController.updateById"
      },
      "get": {
        "x-controller-name": "FeeController",
        "x-operation-name": "findById",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "200": {
            "description": "Fee model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fee.Filter"
                }
              }
            }
          }
        ],
        "operationId": "FeeController.findById"
      },
      "delete": {
        "x-controller-name": "FeeController",
        "x-operation-name": "deleteById",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Fee DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "operationId": "FeeController.deleteById"
      }
    },
    "/fees": {
      "post": {
        "x-controller-name": "FeeController",
        "x-operation-name": "create",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "200": {
            "description": "Fee model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fee"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewFee"
              }
            }
          }
        },
        "operationId": "FeeController.create"
      },
      "patch": {
        "x-controller-name": "FeeController",
        "x-operation-name": "updateAll",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "200": {
            "description": "Fee PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fee.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Fee>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeePartial"
              }
            }
          }
        },
        "operationId": "FeeController.updateAll"
      },
      "get": {
        "x-controller-name": "FeeController",
        "x-operation-name": "find",
        "tags": [
          "FeeController"
        ],
        "responses": {
          "200": {
            "description": "Array of Fee model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeeWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fee.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "FeeController.find"
      }
    },
    "/files/{filename}": {
      "get": {
        "x-controller-name": "FileController",
        "x-operation-name": "downloadFile",
        "tags": [
          "FileController"
        ],
        "responses": {
          "200": {
            "description": "The file content",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "FileController.downloadFile"
      }
    },
    "/files": {
      "post": {
        "x-controller-name": "FileController",
        "x-operation-name": "fileUpload",
        "tags": [
          "FileController"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Files and fields"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "x-parser": "stream",
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "description": "Request body for multipart/form-data based file upload",
          "required": true
        },
        "operationId": "FileController.fileUpload"
      },
      "get": {
        "x-controller-name": "FileController",
        "x-operation-name": "listFiles",
        "tags": [
          "FileController"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "A list of files"
          }
        },
        "operationId": "FileController.listFiles"
      }
    },
    "/forex-rates/count": {
      "get": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "count",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "ForexRate model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ForexRate.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ForexRate>"
                }
              }
            }
          }
        ],
        "operationId": "ForexRateController.count"
      }
    },
    "/forex-rates/latest": {
      "get": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "latest",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "Array of ForexRate model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForexRateWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ForexRate.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ForexRate>"
                }
              }
            }
          }
        ],
        "operationId": "ForexRateController.latest"
      }
    },
    "/forex-rates/{id}": {
      "put": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "replaceById",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ForexRate PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForexRate"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ForexRateController.replaceById"
      },
      "patch": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "updateById",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ForexRate PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForexRatePartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ForexRateController.updateById"
      },
      "get": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "findById",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "ForexRate model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexRateWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexRate.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ForexRateController.findById"
      },
      "delete": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "deleteById",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ForexRate DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "operationId": "ForexRateController.deleteById"
      }
    },
    "/forex-rates": {
      "post": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "create",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "ForexRate model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexRate"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewForexRate"
              }
            }
          }
        },
        "operationId": "ForexRateController.create"
      },
      "patch": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "updateAll",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "ForexRate PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ForexRate.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ForexRate>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForexRatePartial"
              }
            }
          }
        },
        "operationId": "ForexRateController.updateAll"
      },
      "get": {
        "x-controller-name": "ForexRateController",
        "x-operation-name": "find",
        "tags": [
          "ForexRateController"
        ],
        "responses": {
          "200": {
            "description": "Array of ForexRate model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForexRateWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForexRate.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "ForexRateController.find"
      }
    },
    "/partners/count": {
      "get": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "count",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "200": {
            "description": "Partner model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Partner.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Partner>"
                }
              }
            }
          }
        ],
        "operationId": "PartnerController.count"
      }
    },
    "/partners/{id}": {
      "put": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "replaceById",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "204": {
            "description": "Partner PUT success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Partner"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "PartnerController.replaceById"
      },
      "patch": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "updateById",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "204": {
            "description": "Partner PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "PartnerController.updateById"
      },
      "get": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "findById",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "200": {
            "description": "Partner model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Partner.Filter"
                }
              }
            }
          }
        ],
        "operationId": "PartnerController.findById"
      },
      "delete": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "deleteById",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "204": {
            "description": "Partner DELETE success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "PartnerController.deleteById"
      }
    },
    "/partners": {
      "post": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "create",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "200": {
            "description": "Partner model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Partner"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPartner"
              }
            }
          }
        },
        "operationId": "PartnerController.create"
      },
      "get": {
        "x-controller-name": "PartnerController",
        "x-operation-name": "find",
        "tags": [
          "PartnerController"
        ],
        "responses": {
          "200": {
            "description": "Array of Partner model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartnerWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Partner.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "PartnerController.find"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Return value of PingController.ping"
          }
        },
        "operationId": "PingController.ping"
      }
    },
    "/pingQueue": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "pingQueue",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "greeting": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "headers": {
                      "type": "object",
                      "properties": {
                        "Content-Type": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "PingController.pingQueue"
      }
    },
    "/quotes/count": {
      "get": {
        "x-controller-name": "QuoteController",
        "x-operation-name": "count",
        "tags": [
          "QuoteController"
        ],
        "responses": {
          "200": {
            "description": "Quote model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Quote.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Quote>"
                }
              }
            }
          }
        ],
        "operationId": "QuoteController.count"
      }
    },
    "/quotes/{id}": {
      "patch": {
        "x-controller-name": "QuoteController",
        "x-operation-name": "updateById",
        "tags": [
          "QuoteController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Quote PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuotePartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "QuoteController.updateById"
      },
      "get": {
        "x-controller-name": "QuoteController",
        "x-operation-name": "findById",
        "tags": [
          "QuoteController"
        ],
        "responses": {
          "200": {
            "description": "Quote model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote.Filter"
                }
              }
            }
          }
        ],
        "operationId": "QuoteController.findById"
      }
    },
    "/quotes": {
      "post": {
        "x-controller-name": "QuoteController",
        "x-operation-name": "create",
        "tags": [
          "QuoteController"
        ],
        "responses": {
          "200": {
            "description": "Quote model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewQuote"
              }
            }
          }
        },
        "operationId": "QuoteController.create"
      },
      "get": {
        "x-controller-name": "QuoteController",
        "x-operation-name": "find",
        "tags": [
          "QuoteController"
        ],
        "responses": {
          "200": {
            "description": "Array of Quote model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "QuoteController.find"
      }
    },
    "/settings/count": {
      "get": {
        "x-controller-name": "SettingController",
        "x-operation-name": "count",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Setting model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Setting.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<Setting>"
                }
              }
            }
          }
        ],
        "operationId": "SettingController.count"
      }
    },
    "/settings/{id}": {
      "put": {
        "x-controller-name": "SettingController",
        "x-operation-name": "replaceById",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "204": {
            "description": "Setting PUT success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Setting"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SettingController.replaceById"
      },
      "patch": {
        "x-controller-name": "SettingController",
        "x-operation-name": "updateById",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "204": {
            "description": "Setting PATCH success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "SettingController.updateById"
      },
      "get": {
        "x-controller-name": "SettingController",
        "x-operation-name": "findById",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Setting model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting.Filter"
                }
              }
            }
          }
        ],
        "operationId": "SettingController.findById"
      },
      "delete": {
        "x-controller-name": "SettingController",
        "x-operation-name": "deleteById",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "204": {
            "description": "Setting DELETE success"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "operationId": "SettingController.deleteById"
      }
    },
    "/settings": {
      "post": {
        "x-controller-name": "SettingController",
        "x-operation-name": "create",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Setting model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSetting"
              }
            }
          }
        },
        "operationId": "SettingController.create"
      },
      "get": {
        "x-controller-name": "SettingController",
        "x-operation-name": "find",
        "tags": [
          "SettingController"
        ],
        "responses": {
          "200": {
            "description": "Array of Setting model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "SettingController.find"
      }
    },
    "/transfers/{id}": {
      "get": {
        "x-controller-name": "TransferController",
        "x-operation-name": "findById",
        "tags": [
          "TransferController"
        ],
        "responses": {
          "200": {
            "description": "Transfer model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer.Filter"
                }
              }
            }
          }
        ],
        "operationId": "TransferController.findById"
      }
    },
    "/transfers": {
      "post": {
        "x-controller-name": "TransferController",
        "x-operation-name": "create",
        "tags": [
          "TransferController"
        ],
        "responses": {
          "200": {
            "description": "Transfer model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTransfer"
              }
            }
          }
        },
        "operationId": "TransferController.create"
      },
      "get": {
        "x-controller-name": "TransferController",
        "x-operation-name": "find",
        "tags": [
          "TransferController"
        ],
        "responses": {
          "200": {
            "description": "Array of Transfer model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransferWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "TransferController.find"
      }
    },
    "/users/login": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "login",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  }
                }
              }
            }
          },
          "description": "The input of login function",
          "required": true
        },
        "operationId": "UserController.login"
      }
    },
    "/users/me": {
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "printCurrentUser",
        "tags": [
          "UserController"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The current user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "UserController.printCurrentUser"
      }
    },
    "/users/register": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "register",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "operationId": "UserController.register"
      }
    },
    "/users/register-confirm": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "registerConfirm",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "minLength": 6
                  }
                }
              }
            }
          }
        },
        "operationId": "UserController.registerConfirm"
      }
    },
    "/users/{userId}/accounts/{id}": {
      "patch": {
        "x-controller-name": "AccountController",
        "x-operation-name": "updateById",
        "tags": [
          "AccountController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPartial"
              }
            }
          },
          "x-parameter-index": 2
        },
        "operationId": "AccountController.updateById"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "findById",
        "tags": [
          "AccountController"
        ],
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.findById"
      }
    },
    "/users/{userId}/accounts": {
      "post": {
        "x-controller-name": "AccountController",
        "x-operation-name": "create",
        "tags": [
          "AccountController"
        ],
        "responses": {
          "200": {
            "description": "Account model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountExcluding_userId_"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccount"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "AccountController.create"
      },
      "get": {
        "x-controller-name": "AccountController",
        "x-operation-name": "find",
        "tags": [
          "AccountController"
        ],
        "responses": {
          "200": {
            "description": "Array of Account model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "AccountController.find"
      }
    },
    "/users/{userId}/change-password": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "changePassword",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "password"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6
                  }
                }
              }
            }
          },
          "description": "The input of new password function",
          "required": true,
          "x-parameter-index": 1
        },
        "operationId": "UserController.changePassword"
      }
    },
    "/users/{userId}": {
      "patch": {
        "x-controller-name": "UserController",
        "x-operation-name": "updateById",
        "tags": [
          "UserController"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPartial"
              }
            }
          },
          "description": "update user",
          "x-parameter-index": 1
        },
        "operationId": "UserController.updateById"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "findById",
        "tags": [
          "UserController"
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "UserController.findById"
      }
    },
    "/users": {
      "post": {
        "x-controller-name": "UserController",
        "x-operation-name": "create",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "operationId": "UserController.create"
      },
      "get": {
        "x-controller-name": "UserController",
        "x-operation-name": "find",
        "tags": [
          "UserController"
        ],
        "responses": {
          "200": {
            "description": "Array of User model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User.Filter"
                }
              }
            }
          }
        ],
        "operationId": "UserController.find"
      }
    },
    "/withdraws": {
      "get": {
        "x-controller-name": "WithdrawController",
        "x-operation-name": "find",
        "tags": [
          "WithdrawController"
        ],
        "responses": {
          "200": {
            "description": "Get list of withdrawals",
            "content": {
              "application/json": {
                "schema": {
                  "schema": {
                    "$ref": "#/components/schemas/WithdrawWithRelations",
                    "definitions": {
                      "AccountWithRelations": {
                        "$ref": "#/components/schemas/AccountWithRelations"
                      },
                      "TransactionWithRelations": {
                        "$ref": "#/components/schemas/TransactionWithRelations"
                      },
                      "PartnerWithRelations": {
                        "$ref": "#/components/schemas/PartnerWithRelations"
                      },
                      "UserCredentialWithRelations": {
                        "$ref": "#/components/schemas/UserCredentialWithRelations"
                      },
                      "ApikeyWithRelations": {
                        "$ref": "#/components/schemas/ApikeyWithRelations"
                      },
                      "UserWithRelations": {
                        "$ref": "#/components/schemas/UserWithRelations"
                      },
                      "CountryWithRelations": {
                        "$ref": "#/components/schemas/CountryWithRelations"
                      },
                      "ForexRateWithRelations": {
                        "$ref": "#/components/schemas/ForexRateWithRelations"
                      },
                      "CurrencyWithRelations": {
                        "$ref": "#/components/schemas/CurrencyWithRelations"
                      },
                      "BankWithRelations": {
                        "$ref": "#/components/schemas/BankWithRelations"
                      },
                      "BeneficiaryWithRelations": {
                        "$ref": "#/components/schemas/BeneficiaryWithRelations"
                      },
                      "WithdrawWithRelations": {
                        "$ref": "#/components/schemas/WithdrawWithRelations"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Withdraw.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "WithdrawController.find"
      }
    }
  },
  "servers": [
    {
      "url": "http://api.stg.pazemo.com"
    }
  ],
  "components": {
    "schemas": {
      "PartnerWithRelations": {
        "title": "PartnerWithRelations",
        "type": "object",
        "description": "(tsType: PartnerWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithRelations"
            }
          }
        },
        "required": [
          "name",
          "code"
        ],
        "additionalProperties": false,
        "x-typescript-type": "PartnerWithRelations"
      },
      "UserCredentialWithRelations": {
        "title": "UserCredentialWithRelations",
        "type": "object",
        "description": "(tsType: UserCredentialWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserWithRelations"
          }
        },
        "required": [
          "userId",
          "password"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UserCredentialWithRelations"
      },
      "ApikeyWithRelations": {
        "title": "ApikeyWithRelations",
        "type": "object",
        "description": "(tsType: ApikeyWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserWithRelations"
          }
        },
        "required": [
          "createdTime",
          "userId",
          "name",
          "secret"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ApikeyWithRelations"
      },
      "UserWithRelations": {
        "title": "UserWithRelations",
        "type": "object",
        "description": "(tsType: UserWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "transform": [
              "toLowerCase"
            ],
            "format": "email"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "configs": {
            "type": "object"
          },
          "partner": {
            "$ref": "#/components/schemas/PartnerWithRelations"
          },
          "userCredentials": {
            "$ref": "#/components/schemas/UserCredentialWithRelations"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountWithRelations"
            }
          },
          "apikeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApikeyWithRelations"
            }
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "email",
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "UserWithRelations"
      },
      "CountryWithRelations": {
        "title": "CountryWithRelations",
        "type": "object",
        "description": "(tsType: CountryWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "CountryWithRelations"
      },
      "ForexRateWithRelations": {
        "title": "ForexRateWithRelations",
        "type": "object",
        "description": "(tsType: ForexRateWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "baseCurrency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          }
        },
        "required": [
          "createdTime",
          "startDate",
          "base",
          "currencyId",
          "rate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "ForexRateWithRelations"
      },
      "CurrencyWithRelations": {
        "title": "CurrencyWithRelations",
        "type": "object",
        "description": "(tsType: CurrencyWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "visible": {
            "type": "boolean"
          },
          "precision": {
            "type": "number"
          },
          "iconUrl": {
            "type": "string"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryWithRelations"
            }
          },
          "base": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForexRateWithRelations"
            }
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "position",
          "visible",
          "precision"
        ],
        "additionalProperties": false,
        "x-typescript-type": "CurrencyWithRelations"
      },
      "TransactionWithRelations": {
        "title": "TransactionWithRelations",
        "type": "object",
        "description": "(tsType: TransactionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "debit",
              "credit"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "failed",
              "active"
            ]
          },
          "amount": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/AccountWithRelations"
          }
        },
        "required": [
          "createdTime",
          "type",
          "status",
          "amount",
          "notes"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TransactionWithRelations"
      },
      "AccountWithRelations": {
        "title": "AccountWithRelations",
        "type": "object",
        "description": "(tsType: AccountWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserWithRelations"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionWithRelations"
            }
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "userId",
          "currencyId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "AccountWithRelations"
      },
      "AccountExcluding_userId_": {
        "title": "AccountExcluding_userId_",
        "type": "object",
        "description": "(tsType: Omit<Account, 'userId'>, schemaOptions: { exclude: [ 'userId' ] })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "currencyId": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "currencyId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Account, 'userId'>"
      },
      "NewAccount": {
        "title": "NewAccount",
        "type": "object",
        "description": "(tsType: Omit<Account, 'id' | 'createdTime' | 'updatedTime' | 'userId'>, schemaOptions: { title: 'NewAccount', exclude: [ 'id', 'createdTime', 'updatedTime', 'userId' ] })",
        "properties": {
          "currencyId": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        },
        "required": [
          "currencyId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Account, 'id' | 'createdTime' | 'updatedTime' | 'userId'>"
      },
      "AccountPartial": {
        "title": "AccountPartial",
        "type": "object",
        "description": "(tsType: Partial<Account>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Account>"
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "userId",
          "currencyId"
        ],
        "additionalProperties": false
      },
      "Apikey": {
        "title": "Apikey",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "createdTime",
          "userId",
          "name",
          "secret"
        ],
        "additionalProperties": false
      },
      "NewApikey": {
        "title": "NewApikey",
        "type": "object",
        "description": "(tsType: Omit<Apikey, 'id' | 'userId' | 'createdTime' | 'secret'>, schemaOptions: { title: 'NewApikey', exclude: [ 'id', 'userId', 'createdTime', 'secret' ] })",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Apikey, 'id' | 'userId' | 'createdTime' | 'secret'>"
      },
      "BankWithRelations": {
        "title": "BankWithRelations",
        "type": "object",
        "description": "(tsType: BankWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "networkType": {
            "type": "string",
            "enum": [
              "bank",
              "switching",
              "crypto"
            ]
          },
          "name": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "swiftCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "fullName"
        ],
        "additionalProperties": false,
        "x-typescript-type": "BankWithRelations"
      },
      "BeneficiaryExcluding_updatedTime_": {
        "title": "BeneficiaryExcluding_updatedTime_",
        "type": "object",
        "description": "(tsType: Omit<Beneficiary, 'updatedTime'>, schemaOptions: { exclude: [ 'updatedTime' ] })",
        "properties": {
          "id": {
            "type": "number"
          },
          "accountId": {
            "type": "string"
          },
          "bankId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "inactive",
              "failed",
              "verified"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "personal",
              "individual",
              "corporate"
            ]
          }
        },
        "required": [
          "accountId",
          "bankId",
          "address",
          "status",
          "type"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Beneficiary, 'updatedTime'>"
      },
      "NewBeneficiary": {
        "title": "NewBeneficiary",
        "type": "object",
        "description": "(tsType: Omit<Beneficiary, 'id' | 'status' | 'name'>, schemaOptions: { title: 'NewBeneficiary', exclude: [ 'id', 'status', 'name' ] })",
        "properties": {
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "bankId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "personal",
              "individual",
              "corporate"
            ]
          }
        },
        "required": [
          "accountId",
          "bankId",
          "address",
          "type"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Beneficiary, 'id' | 'status' | 'name'>"
      },
      "BeneficiaryWithRelations": {
        "title": "BeneficiaryWithRelations",
        "type": "object",
        "description": "(tsType: BeneficiaryWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "bankId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "inactive",
              "failed",
              "verified"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "personal",
              "individual",
              "corporate"
            ]
          },
          "account": {
            "$ref": "#/components/schemas/AccountWithRelations"
          },
          "bank": {
            "$ref": "#/components/schemas/BankWithRelations"
          }
        },
        "required": [
          "accountId",
          "bankId",
          "address",
          "status",
          "type"
        ],
        "additionalProperties": false,
        "x-typescript-type": "BeneficiaryWithRelations"
      },
      "Country": {
        "title": "Country",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false
      },
      "NewCountry": {
        "title": "NewCountry",
        "type": "object",
        "description": "(tsType: Country, schemaOptions: { title: 'NewCountry' })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Country"
      },
      "CountryPartial": {
        "title": "CountryPartial",
        "type": "object",
        "description": "(tsType: Partial<Country>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Country>"
      },
      "Currency": {
        "title": "Currency",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "visible": {
            "type": "boolean"
          },
          "precision": {
            "type": "number"
          },
          "iconUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "position",
          "visible",
          "precision"
        ],
        "additionalProperties": false
      },
      "NewCurrency": {
        "title": "NewCurrency",
        "type": "object",
        "description": "(tsType: Currency, schemaOptions: { title: 'NewCurrency' })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "visible": {
            "type": "boolean"
          },
          "precision": {
            "type": "number"
          },
          "iconUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "position",
          "visible",
          "precision"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Currency"
      },
      "CurrencyPartial": {
        "title": "CurrencyPartial",
        "type": "object",
        "description": "(tsType: Partial<Currency>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "visible": {
            "type": "boolean"
          },
          "precision": {
            "type": "number"
          },
          "iconUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Currency>"
      },
      "Fee": {
        "title": "Fee",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "partnerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "transfer",
              "exchange",
              "withdraw"
            ]
          },
          "currencyId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "createdTime",
          "partnerId",
          "type",
          "currencyId",
          "amount"
        ],
        "additionalProperties": false
      },
      "NewFee": {
        "title": "NewFee",
        "type": "object",
        "description": "(tsType: Omit<Fee, 'id' | 'createdTime'>, schemaOptions: { title: 'NewFee', exclude: [ 'id', 'createdTime' ] })",
        "properties": {
          "partnerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "transfer",
              "exchange",
              "withdraw"
            ]
          },
          "currencyId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "partnerId",
          "type",
          "currencyId",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Fee, 'id' | 'createdTime'>"
      },
      "FeeWithRelations": {
        "title": "FeeWithRelations",
        "type": "object",
        "description": "(tsType: FeeWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "partnerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "transfer",
              "exchange",
              "withdraw"
            ]
          },
          "currencyId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "partner": {
            "$ref": "#/components/schemas/PartnerWithRelations"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          }
        },
        "required": [
          "createdTime",
          "partnerId",
          "type",
          "currencyId",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "FeeWithRelations"
      },
      "FeePartial": {
        "title": "FeePartial",
        "type": "object",
        "description": "(tsType: Partial<Fee>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "partnerId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "transfer",
              "exchange",
              "withdraw"
            ]
          },
          "currencyId": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Fee>"
      },
      "ForexRate": {
        "title": "ForexRate",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          }
        },
        "required": [
          "createdTime",
          "startDate",
          "base",
          "currencyId",
          "rate"
        ],
        "additionalProperties": false
      },
      "NewForexRate": {
        "title": "NewForexRate",
        "type": "object",
        "description": "(tsType: Omit<ForexRate, 'id' | 'createdTime'>, schemaOptions: { title: 'NewForexRate', exclude: [ 'id', 'createdTime' ] })",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          }
        },
        "required": [
          "startDate",
          "base",
          "currencyId",
          "rate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<ForexRate, 'id' | 'createdTime'>"
      },
      "ForexRatePartial": {
        "title": "ForexRatePartial",
        "type": "object",
        "description": "(tsType: Partial<ForexRate>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string"
          },
          "currencyId": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<ForexRate>"
      },
      "Partner": {
        "title": "Partner",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code"
        ],
        "additionalProperties": false
      },
      "NewPartner": {
        "title": "NewPartner",
        "type": "object",
        "description": "(tsType: Partner, schemaOptions: { title: 'NewPartner' })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "code"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Partner"
      },
      "PartnerPartial": {
        "title": "PartnerPartial",
        "type": "object",
        "description": "(tsType: Partial<Partner>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Partner>"
      },
      "Quote": {
        "title": "Quote",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "sendCurrencyId": {
            "type": "string"
          },
          "receiveCurrencyId": {
            "type": "string"
          },
          "sendAmount": {
            "type": "number"
          },
          "receiveAmount": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          }
        },
        "required": [
          "userId",
          "sendCurrencyId",
          "receiveCurrencyId",
          "sendAmount",
          "status",
          "rate"
        ],
        "additionalProperties": false
      },
      "NewQuote": {
        "title": "NewQuote",
        "type": "object",
        "description": "(tsType: Omit<Quote, 'id' | 'createdTime' | 'userId' | 'receiveAmount' | 'status'>, schemaOptions: { title: 'NewQuote', exclude: [ 'id', 'createdTime', 'userId', 'receiveAmount', 'status' ] })",
        "properties": {
          "sendCurrencyId": {
            "type": "string"
          },
          "receiveCurrencyId": {
            "type": "string"
          },
          "sendAmount": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          }
        },
        "required": [
          "sendCurrencyId",
          "receiveCurrencyId",
          "sendAmount",
          "rate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Quote, 'id' | 'createdTime' | 'userId' | 'receiveAmount' | 'status'>"
      },
      "QuoteFeeWithRelations": {
        "title": "QuoteFeeWithRelations",
        "type": "object",
        "description": "(tsType: QuoteFeeWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "quoteId": {
            "type": "string"
          },
          "feeId": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "quote": {
            "$ref": "#/components/schemas/QuoteWithRelations"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeWithRelations"
          }
        },
        "required": [
          "quoteId",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "QuoteFeeWithRelations"
      },
      "TransferWithRelations": {
        "title": "TransferWithRelations",
        "type": "object",
        "description": "(tsType: TransferWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "senderAccountId": {
            "type": "string"
          },
          "receiverAccountId": {
            "type": "string"
          },
          "quoteId": {
            "type": "string"
          },
          "senderTransactionId": {
            "type": "number"
          },
          "receiverTransactionId": {
            "type": "number"
          },
          "senderAccount": {
            "$ref": "#/components/schemas/AccountWithRelations"
          },
          "receiverAccount": {
            "$ref": "#/components/schemas/AccountWithRelations"
          },
          "quote": {
            "$ref": "#/components/schemas/QuoteWithRelations"
          },
          "senderTransaction": {
            "$ref": "#/components/schemas/TransactionWithRelations"
          },
          "receiverTransaction": {
            "$ref": "#/components/schemas/TransactionWithRelations"
          }
        },
        "required": [
          "createdTime",
          "quoteId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "TransferWithRelations"
      },
      "QuoteWithRelations": {
        "title": "QuoteWithRelations",
        "type": "object",
        "description": "(tsType: QuoteWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "sendCurrencyId": {
            "type": "string"
          },
          "receiveCurrencyId": {
            "type": "string"
          },
          "sendAmount": {
            "type": "number"
          },
          "receiveAmount": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "user": {
            "$ref": "#/components/schemas/UserWithRelations"
          },
          "sendCurrency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          },
          "receiveCurrency": {
            "$ref": "#/components/schemas/CurrencyWithRelations"
          },
          "quoteFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteFeeWithRelations"
            }
          },
          "transfer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferWithRelations"
            }
          }
        },
        "required": [
          "userId",
          "sendCurrencyId",
          "receiveCurrencyId",
          "sendAmount",
          "status",
          "rate"
        ],
        "additionalProperties": false,
        "x-typescript-type": "QuoteWithRelations"
      },
      "QuotePartial": {
        "title": "QuotePartial",
        "type": "object",
        "description": "(tsType: Partial<Quote>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "sendCurrencyId": {
            "type": "string"
          },
          "receiveCurrencyId": {
            "type": "string"
          },
          "sendAmount": {
            "type": "number"
          },
          "receiveAmount": {
            "type": "number"
          },
          "status": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Quote>"
      },
      "Setting": {
        "title": "Setting",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "keyid": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "keyid",
          "value"
        ],
        "additionalProperties": false
      },
      "NewSetting": {
        "title": "NewSetting",
        "type": "object",
        "description": "(tsType: Omit<Setting, 'id'>, schemaOptions: { title: 'NewSetting', exclude: [ 'id' ] })",
        "properties": {
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "keyid": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "keyid",
          "value"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Setting, 'id'>"
      },
      "SettingWithRelations": {
        "title": "SettingWithRelations",
        "type": "object",
        "description": "(tsType: SettingWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "keyid": {
            "type": "string"
          },
          "value": {}
        },
        "required": [
          "keyid",
          "value"
        ],
        "additionalProperties": false,
        "x-typescript-type": "SettingWithRelations"
      },
      "SettingPartial": {
        "title": "SettingPartial",
        "type": "object",
        "description": "(tsType: Partial<Setting>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "keyid": {
            "type": "string"
          },
          "value": {}
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<Setting>"
      },
      "Transfer": {
        "title": "Transfer",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "senderAccountId": {
            "type": "string"
          },
          "receiverAccountId": {
            "type": "string"
          },
          "quoteId": {
            "type": "string"
          },
          "senderTransactionId": {
            "type": "number"
          },
          "receiverTransactionId": {
            "type": "number"
          }
        },
        "required": [
          "createdTime",
          "quoteId"
        ],
        "additionalProperties": false
      },
      "NewTransfer": {
        "title": "NewTransfer",
        "type": "object",
        "description": "(tsType: Omit<Transfer, 'id' | 'createdTime'>, schemaOptions: { title: 'NewTransfer', exclude: [ 'id', 'createdTime' ] })",
        "properties": {
          "senderAccountId": {
            "type": "string"
          },
          "receiverAccountId": {
            "type": "string"
          },
          "quoteId": {
            "type": "string"
          },
          "senderTransactionId": {
            "type": "number"
          },
          "receiverTransactionId": {
            "type": "number"
          }
        },
        "required": [
          "quoteId"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Transfer, 'id' | 'createdTime'>"
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "transform": [
              "toLowerCase"
            ],
            "format": "email"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "configs": {
            "type": "object"
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "email",
          "name"
        ],
        "additionalProperties": false
      },
      "NewUser": {
        "title": "NewUser",
        "type": "object",
        "description": "(tsType: Omit<NewUserRequest, 'createdTime' | 'updatedTime' | 'roles'>, schemaOptions: { title: 'NewUser', exclude: [ 'createdTime', 'updatedTime', 'roles' ] })",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "transform": [
              "toLowerCase"
            ],
            "format": "email"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "configs": {
            "type": "object"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "name",
          "password"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<NewUserRequest, 'createdTime' | 'updatedTime' | 'roles'>"
      },
      "NewUserRequest": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "transform": [
              "toLowerCase"
            ],
            "format": "email"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "configs": {
            "type": "object"
          }
        },
        "required": [
          "createdTime",
          "updatedTime",
          "email",
          "name"
        ],
        "additionalProperties": false
      },
      "MyUserService": {},
      "UserPartial": {
        "title": "UserPartial",
        "type": "object",
        "description": "(tsType: Partial<User>, schemaOptions: { partial: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "transform": [
              "toLowerCase"
            ],
            "format": "email"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "configs": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "Partial<User>"
      },
      "Withdraw": {
        "title": "Withdraw",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "transactionId": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "cancelled",
              "process",
              "failed",
              "sent",
              "unsent",
              "succeed"
            ]
          },
          "network": {
            "type": "string",
            "enum": [
              "flip",
              "bri"
            ]
          },
          "address": {
            "type": "string"
          },
          "addressName": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "feeAmount": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "beneficiaryId": {
            "type": "number"
          },
          "reference": {
            "type": "string"
          },
          "referenceData": {
            "type": "object"
          }
        },
        "required": [
          "createdTime",
          "status",
          "network",
          "address",
          "amount",
          "feeAmount"
        ],
        "additionalProperties": false
      },
      "WithdrawExcluding_createdTime-status-transactionId-network-feeAmount_": {
        "title": "WithdrawExcluding_createdTime-status-transactionId-network-feeAmount_",
        "type": "object",
        "description": "(tsType: Omit<Withdraw, 'createdTime' | 'status' | 'transactionId' | 'network' | 'feeAmount'>, schemaOptions: { exclude: [ 'createdTime', 'status', 'transactionId', 'network', 'feeAmount' ] })",
        "properties": {
          "id": {
            "type": "string"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "addressName": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "beneficiaryId": {
            "type": "number"
          },
          "reference": {
            "type": "string"
          },
          "referenceData": {
            "type": "object"
          }
        },
        "required": [
          "address",
          "amount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "Omit<Withdraw, 'createdTime' | 'status' | 'transactionId' | 'network' | 'feeAmount'>"
      },
      "Transaction.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Transaction.ScopeFilter"
      },
      "Transaction.IncludeFilter.Items": {
        "title": "Transaction.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Transaction.ScopeFilter"
          }
        }
      },
      "Transaction.Filter": {
        "type": "object",
        "title": "Transaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "notes": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "accountId",
                    "type",
                    "status",
                    "amount",
                    "notes"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Transaction.Fields"
          },
          "include": {
            "title": "Transaction.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transaction.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transaction>"
      },
      "Transaction.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Transaction.ScopeFilter"
      },
      "Transaction.IncludeFilter.Items1": {
        "title": "Transaction.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Transaction.ScopeFilter1"
          }
        }
      },
      "Transaction.Filter1": {
        "type": "object",
        "title": "Transaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Transaction.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "notes": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "accountId",
                    "type",
                    "status",
                    "amount",
                    "notes"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Transaction.Fields"
          },
          "include": {
            "title": "Transaction.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transaction.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transaction>"
      },
      "Withdraw.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Withdraw.ScopeFilter"
      },
      "Withdraw.IncludeFilter.Items": {
        "title": "Withdraw.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Withdraw.ScopeFilter"
          }
        }
      },
      "Withdraw.Filter": {
        "type": "object",
        "title": "Withdraw.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "network": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "addressName": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "feeAmount": {
                    "type": "boolean"
                  },
                  "notes": {
                    "type": "boolean"
                  },
                  "prefix": {
                    "type": "boolean"
                  },
                  "beneficiaryId": {
                    "type": "boolean"
                  },
                  "reference": {
                    "type": "boolean"
                  },
                  "referenceData": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "accountId",
                    "transactionId",
                    "status",
                    "network",
                    "address",
                    "addressName",
                    "amount",
                    "feeAmount",
                    "notes",
                    "prefix",
                    "beneficiaryId",
                    "reference",
                    "referenceData"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Withdraw.Fields"
          },
          "include": {
            "title": "Withdraw.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Withdraw.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Withdraw>"
      },
      "Apikey.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Apikey.ScopeFilter"
      },
      "Apikey.IncludeFilter.Items": {
        "title": "Apikey.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Apikey.ScopeFilter"
          }
        }
      },
      "Apikey.Filter": {
        "type": "object",
        "title": "Apikey.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "userId",
                    "name",
                    "secret"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Apikey.Fields"
          },
          "include": {
            "title": "Apikey.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Apikey.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Apikey>"
      },
      "Apikey.Filter1": {
        "type": "object",
        "title": "Apikey.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Apikey.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "secret": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "userId",
                    "name",
                    "secret"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Apikey.Fields"
          },
          "include": {
            "title": "Apikey.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Apikey.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Apikey>"
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "Bank.Filter": {
        "type": "object",
        "title": "Bank.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Bank.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "networkType": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "fullName": {
                    "type": "boolean"
                  },
                  "swiftCode": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "networkType",
                    "name",
                    "fullName",
                    "swiftCode",
                    "country"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Bank.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Bank>"
      },
      "Beneficiary.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Beneficiary.ScopeFilter"
      },
      "Beneficiary.IncludeFilter.Items": {
        "title": "Beneficiary.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Beneficiary.ScopeFilter"
          }
        }
      },
      "Beneficiary.Filter": {
        "type": "object",
        "title": "Beneficiary.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "bankId": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "updatedTime",
                    "accountId",
                    "bankId",
                    "address",
                    "name",
                    "email",
                    "label",
                    "status",
                    "type"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Beneficiary.Fields"
          },
          "include": {
            "title": "Beneficiary.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Beneficiary.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Beneficiary>"
      },
      "Beneficiary.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Beneficiary.ScopeFilter"
      },
      "Beneficiary.IncludeFilter.Items1": {
        "title": "Beneficiary.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Beneficiary.ScopeFilter1"
          }
        }
      },
      "Beneficiary.Filter1": {
        "type": "object",
        "title": "Beneficiary.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Beneficiary.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "bankId": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "updatedTime",
                    "accountId",
                    "bankId",
                    "address",
                    "name",
                    "email",
                    "label",
                    "status",
                    "type"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Beneficiary.Fields"
          },
          "include": {
            "title": "Beneficiary.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Beneficiary.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Beneficiary>"
      },
      "Country.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Country.ScopeFilter"
      },
      "Country.IncludeFilter.Items": {
        "title": "Country.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Country.ScopeFilter"
          }
        }
      },
      "Country.Filter": {
        "type": "object",
        "title": "Country.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Country.Fields"
          },
          "include": {
            "title": "Country.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Country.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Country>"
      },
      "Country.Filter1": {
        "type": "object",
        "title": "Country.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Country.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Country.Fields"
          },
          "include": {
            "title": "Country.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Country.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Country>"
      },
      "Currency.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Currency.ScopeFilter"
      },
      "Currency.IncludeFilter.Items": {
        "title": "Currency.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Currency.ScopeFilter"
          }
        }
      },
      "Currency.Filter": {
        "type": "object",
        "title": "Currency.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "symbol": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "boolean"
                  },
                  "visible": {
                    "type": "boolean"
                  },
                  "precision": {
                    "type": "boolean"
                  },
                  "iconUrl": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "symbol",
                    "position",
                    "visible",
                    "precision",
                    "iconUrl"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Currency.Fields"
          },
          "include": {
            "title": "Currency.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Currency.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Currency>"
      },
      "Currency.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Currency.ScopeFilter"
      },
      "Currency.IncludeFilter.Items1": {
        "title": "Currency.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Currency.ScopeFilter1"
          }
        }
      },
      "Currency.Filter1": {
        "type": "object",
        "title": "Currency.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Currency.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "symbol": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "boolean"
                  },
                  "visible": {
                    "type": "boolean"
                  },
                  "precision": {
                    "type": "boolean"
                  },
                  "iconUrl": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "symbol",
                    "position",
                    "visible",
                    "precision",
                    "iconUrl"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Currency.Fields"
          },
          "include": {
            "title": "Currency.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Currency.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Currency>"
      },
      "Fee.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Fee.ScopeFilter"
      },
      "Fee.IncludeFilter.Items": {
        "title": "Fee.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Fee.ScopeFilter"
          }
        }
      },
      "Fee.Filter": {
        "type": "object",
        "title": "Fee.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "partnerId": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "partnerId",
                    "type",
                    "currencyId",
                    "amount"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Fee.Fields"
          },
          "include": {
            "title": "Fee.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Fee.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Fee>"
      },
      "Fee.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Fee.ScopeFilter"
      },
      "Fee.IncludeFilter.Items1": {
        "title": "Fee.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Fee.ScopeFilter1"
          }
        }
      },
      "Fee.Filter1": {
        "type": "object",
        "title": "Fee.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Fee.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "partnerId": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "partnerId",
                    "type",
                    "currencyId",
                    "amount"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Fee.Fields"
          },
          "include": {
            "title": "Fee.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Fee.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Fee>"
      },
      "ForexRate.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "ForexRate.ScopeFilter"
      },
      "ForexRate.IncludeFilter.Items": {
        "title": "ForexRate.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/ForexRate.ScopeFilter"
          }
        }
      },
      "ForexRate.Filter": {
        "type": "object",
        "title": "ForexRate.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "startDate": {
                    "type": "boolean"
                  },
                  "base": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "rate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "startDate",
                    "base",
                    "currencyId",
                    "rate"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ForexRate.Fields"
          },
          "include": {
            "title": "ForexRate.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ForexRate.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ForexRate>"
      },
      "ForexRate.Filter1": {
        "type": "object",
        "title": "ForexRate.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "ForexRate.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "startDate": {
                    "type": "boolean"
                  },
                  "base": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "rate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "startDate",
                    "base",
                    "currencyId",
                    "rate"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ForexRate.Fields"
          },
          "include": {
            "title": "ForexRate.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ForexRate.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ForexRate>"
      },
      "Partner.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Partner.ScopeFilter"
      },
      "Partner.IncludeFilter.Items": {
        "title": "Partner.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Partner.ScopeFilter"
          }
        }
      },
      "Partner.Filter": {
        "type": "object",
        "title": "Partner.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "code": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "code"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Partner.Fields"
          },
          "include": {
            "title": "Partner.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Partner.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Partner>"
      },
      "Partner.Filter1": {
        "type": "object",
        "title": "Partner.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Partner.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "code": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "name",
                    "code"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Partner.Fields"
          },
          "include": {
            "title": "Partner.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Partner.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Partner>"
      },
      "Quote.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Quote.ScopeFilter"
      },
      "Quote.IncludeFilter.Items": {
        "title": "Quote.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Quote.ScopeFilter"
          }
        }
      },
      "Quote.Filter": {
        "type": "object",
        "title": "Quote.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "sendCurrencyId": {
                    "type": "boolean"
                  },
                  "receiveCurrencyId": {
                    "type": "boolean"
                  },
                  "sendAmount": {
                    "type": "boolean"
                  },
                  "receiveAmount": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "rate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "userId",
                    "sendCurrencyId",
                    "receiveCurrencyId",
                    "sendAmount",
                    "receiveAmount",
                    "status",
                    "rate"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Quote.Fields"
          },
          "include": {
            "title": "Quote.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Quote.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Quote>"
      },
      "Quote.Filter1": {
        "type": "object",
        "title": "Quote.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Quote.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "sendCurrencyId": {
                    "type": "boolean"
                  },
                  "receiveCurrencyId": {
                    "type": "boolean"
                  },
                  "sendAmount": {
                    "type": "boolean"
                  },
                  "receiveAmount": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "rate": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "userId",
                    "sendCurrencyId",
                    "receiveCurrencyId",
                    "sendAmount",
                    "receiveAmount",
                    "status",
                    "rate"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Quote.Fields"
          },
          "include": {
            "title": "Quote.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Quote.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Quote>"
      },
      "Setting.Filter": {
        "type": "object",
        "title": "Setting.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "boolean"
                  },
                  "value": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "keyid",
                    "value"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Setting.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Setting>"
      },
      "Setting.Filter1": {
        "type": "object",
        "title": "Setting.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Setting.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "keyid": {
                    "type": "boolean"
                  },
                  "value": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "keyid",
                    "value"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Setting.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Setting>"
      },
      "Transfer.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Transfer.ScopeFilter"
      },
      "Transfer.IncludeFilter.Items": {
        "title": "Transfer.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Transfer.ScopeFilter"
          }
        }
      },
      "Transfer.Filter": {
        "type": "object",
        "title": "Transfer.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "senderAccountId": {
                    "type": "boolean"
                  },
                  "receiverAccountId": {
                    "type": "boolean"
                  },
                  "quoteId": {
                    "type": "boolean"
                  },
                  "senderTransactionId": {
                    "type": "boolean"
                  },
                  "receiverTransactionId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "senderAccountId",
                    "receiverAccountId",
                    "quoteId",
                    "senderTransactionId",
                    "receiverTransactionId"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Transfer.Fields"
          },
          "include": {
            "title": "Transfer.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfer.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transfer>"
      },
      "Transfer.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Transfer.ScopeFilter"
      },
      "Transfer.IncludeFilter.Items1": {
        "title": "Transfer.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Transfer.ScopeFilter1"
          }
        }
      },
      "Transfer.Filter1": {
        "type": "object",
        "title": "Transfer.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Transfer.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "senderAccountId": {
                    "type": "boolean"
                  },
                  "receiverAccountId": {
                    "type": "boolean"
                  },
                  "quoteId": {
                    "type": "boolean"
                  },
                  "senderTransactionId": {
                    "type": "boolean"
                  },
                  "receiverTransactionId": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "senderAccountId",
                    "receiverAccountId",
                    "quoteId",
                    "senderTransactionId",
                    "receiverTransactionId"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Transfer.Fields"
          },
          "include": {
            "title": "Transfer.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfer.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Transfer>"
      },
      "Account.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Account.ScopeFilter"
      },
      "Account.IncludeFilter.Items": {
        "title": "Account.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Account.ScopeFilter"
          }
        }
      },
      "Account.Filter": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "number": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "userId",
                    "currencyId",
                    "number"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          },
          "include": {
            "title": "Account.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Account.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "Account.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Account.ScopeFilter"
      },
      "Account.IncludeFilter.Items1": {
        "title": "Account.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Account.ScopeFilter1"
          }
        }
      },
      "Account.Filter1": {
        "type": "object",
        "title": "Account.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Account.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "userId": {
                    "type": "boolean"
                  },
                  "currencyId": {
                    "type": "boolean"
                  },
                  "number": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "userId",
                    "currencyId",
                    "number"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Account.Fields"
          },
          "include": {
            "title": "Account.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Account.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Account>"
      },
      "User.ScopeFilter": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "User.ScopeFilter"
      },
      "User.IncludeFilter.Items": {
        "title": "User.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/User.ScopeFilter"
          }
        }
      },
      "User.Filter": {
        "type": "object",
        "title": "User.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "User.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "boolean"
                  },
                  "mobile": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "boolean"
                  },
                  "partnerId": {
                    "type": "boolean"
                  },
                  "roles": {
                    "type": "boolean"
                  },
                  "configs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "status",
                    "email",
                    "mobile",
                    "name",
                    "partnerId",
                    "roles",
                    "configs"
                  ],
                  "example": "id"
                },
                "uniqueItems": true
              }
            ],
            "title": "User.Fields"
          },
          "include": {
            "title": "User.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/User.IncludeFilter.Items"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<User>"
      },
      "WithdrawWithRelations": {
        "title": "WithdrawWithRelations",
        "type": "object",
        "description": "(tsType: WithdrawWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "accountId": {
            "type": "string"
          },
          "transactionId": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "cancelled",
              "process",
              "failed",
              "sent",
              "unsent",
              "succeed"
            ]
          },
          "network": {
            "type": "string",
            "enum": [
              "flip",
              "bri"
            ]
          },
          "address": {
            "type": "string"
          },
          "addressName": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "feeAmount": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "beneficiaryId": {
            "type": "number"
          },
          "reference": {
            "type": "string"
          },
          "referenceData": {
            "type": "object"
          },
          "account": {
            "$ref": "#/components/schemas/AccountWithRelations"
          },
          "transaction": {
            "$ref": "#/components/schemas/TransactionWithRelations"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/BeneficiaryWithRelations"
          }
        },
        "required": [
          "createdTime",
          "status",
          "network",
          "address",
          "amount",
          "feeAmount"
        ],
        "additionalProperties": false,
        "x-typescript-type": "WithdrawWithRelations"
      },
      "Withdraw.ScopeFilter1": {
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": false,
        "title": "Withdraw.ScopeFilter"
      },
      "Withdraw.IncludeFilter.Items1": {
        "title": "Withdraw.IncludeFilter.Items",
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/Withdraw.ScopeFilter1"
          }
        }
      },
      "Withdraw.Filter1": {
        "type": "object",
        "title": "Withdraw.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "Withdraw.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "boolean"
                  },
                  "createdTime": {
                    "type": "boolean"
                  },
                  "updatedTime": {
                    "type": "boolean"
                  },
                  "accountId": {
                    "type": "boolean"
                  },
                  "transactionId": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "boolean"
                  },
                  "network": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "boolean"
                  },
                  "addressName": {
                    "type": "boolean"
                  },
                  "amount": {
                    "type": "boolean"
                  },
                  "feeAmount": {
                    "type": "boolean"
                  },
                  "notes": {
                    "type": "boolean"
                  },
                  "prefix": {
                    "type": "boolean"
                  },
                  "beneficiaryId": {
                    "type": "boolean"
                  },
                  "reference": {
                    "type": "boolean"
                  },
                  "referenceData": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "id",
                    "createdTime",
                    "updatedTime",
                    "accountId",
                    "transactionId",
                    "status",
                    "network",
                    "address",
                    "addressName",
                    "amount",
                    "feeAmount",
                    "notes",
                    "prefix",
                    "beneficiaryId",
                    "reference",
                    "referenceData"
                  ]
                },
                "uniqueItems": true
              }
            ],
            "title": "Withdraw.Fields"
          },
          "include": {
            "title": "Withdraw.IncludeFilter",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Withdraw.IncludeFilter.Items1"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<Withdraw>"
      }
    },
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}